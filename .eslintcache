[{"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\index.js":"1","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\other\\reportWebVitals.js":"2","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\app.js":"3","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\navbar.js":"4","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\sign-up.js":"5","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\login.js":"6","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\helpers\\validation.js":"7","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\loading.js":"8","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\helpers\\common.js":"9","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\my-tournaments.js":"10","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\tournament.js":"11","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\fixtures.js":"12","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\league-table.js":"13","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\create-new.js":"14","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin.js":"15","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\tab-panel.js":"16","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\fixtures-dir\\fixtures.js":"17","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\admin-actions.js":"18","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\update-teams.js":"19","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\update-results.js":"20","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\search.js":"21","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\team-search.js":"22"},{"size":497,"mtime":1613174706490,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1613163032838,"results":"25","hashOfConfig":"24"},{"size":3082,"mtime":1613805675605,"results":"26","hashOfConfig":"24"},{"size":7424,"mtime":1613773084056,"results":"27","hashOfConfig":"24"},{"size":351,"mtime":1613171824085,"results":"28","hashOfConfig":"24"},{"size":8098,"mtime":1613689735345,"results":"29","hashOfConfig":"24"},{"size":991,"mtime":1613685436808,"results":"30","hashOfConfig":"24"},{"size":1031,"mtime":1613518497826,"results":"31","hashOfConfig":"24"},{"size":1970,"mtime":1613810750897,"results":"32","hashOfConfig":"24"},{"size":10526,"mtime":1613836870106,"results":"33","hashOfConfig":"24"},{"size":16459,"mtime":1613767276031,"results":"34","hashOfConfig":"24"},{"size":5944,"mtime":1613776597401,"results":"35","hashOfConfig":"24"},{"size":3929,"mtime":1613518497890,"results":"36","hashOfConfig":"24"},{"size":14173,"mtime":1615395246316,"results":"37","hashOfConfig":"24"},{"size":3056,"mtime":1613621484961,"results":"38","hashOfConfig":"24"},{"size":705,"mtime":1613518003107,"results":"39","hashOfConfig":"24"},{"size":34194,"mtime":1614799280230,"results":"40","hashOfConfig":"24"},{"size":12078,"mtime":1613518896199,"results":"41","hashOfConfig":"24"},{"size":11323,"mtime":1613767522290,"results":"42","hashOfConfig":"24"},{"size":1650,"mtime":1613665164836,"results":"43","hashOfConfig":"24"},{"size":8112,"mtime":1613772916290,"results":"44","hashOfConfig":"24"},{"size":4992,"mtime":1615389939087,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"2ce91",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\index.js",[],["92","93"],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\other\\reportWebVitals.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\app.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\navbar.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\sign-up.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\login.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\helpers\\validation.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\loading.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\helpers\\common.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\my-tournaments.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\tournament.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\fixtures.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\league-table.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\create-new.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\tab-panel.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\fixtures-dir\\fixtures.js",["94"],"import React, {useState, useEffect} from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {basicFetch} from \"../../helpers/common\";\r\nimport WaitForServer from \"../loading\";\r\nimport SportsSoccerOutlinedIcon from \"@material-ui/icons/SportsSoccerOutlined\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nconst useResults = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    resultsContainer: {\r\n        paddingTop: 15,\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\"\r\n    },\r\n    resultSet: {\r\n        minWidth: \"40%\",\r\n        marginBottom: 15,\r\n        backgroundColor: \"whitesmoke\"\r\n    },\r\n    resultBox: {\r\n        display: \"flex\",\r\n        minHeight: 45,\r\n        padding: \"10px 0\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    tieBreaker: {\r\n        backgroundColor: \"pink\",\r\n    },\r\n    tieBreakerText: {\r\n        textAlign: \"center\",\r\n        fontWeight: \"bold\",\r\n        color: \"purple\"\r\n    },\r\n    goals: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: 40,\r\n        width: 40,\r\n        marginLeft: 2,\r\n        marginRight: 2,\r\n        borderRadius: 4,\r\n        backgroundColor: \"#C71585\",\r\n        color: \"whitesmoke\",\r\n        fontFamily: \"'Rubik Mono One', sans-serif !important\"\r\n    },\r\n    team: {\r\n        width: 95,\r\n        minWidth: 95,\r\n        alignSelf: \"center\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 15,\r\n        wordBreak: \"break-word\",\r\n        textAlign: \"center\"\r\n    },\r\n    homeTeam: {\r\n        // textAlign: \"right\",\r\n        paddingRight: 10\r\n    },\r\n    awayTeam: {\r\n        // textAlign: \"left\",\r\n        paddingLeft: 10\r\n    },\r\n    advanced: {\r\n        color: \"seagreen\"\r\n    },\r\n    submit: {\r\n        marginTop: 10,\r\n        marginBottom: 20,\r\n        width: \"80%\"\r\n    },\r\n    error: {\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n        fontSize: \"1.2em\",\r\n        margin: \"auto\",\r\n        textAlign: \"center\"\r\n    },\r\n    resultInput: {\r\n        textAlign: \"center\",\r\n        fontWeight: \"bolder\",\r\n        backgroundColor: \"white\"\r\n    },\r\n    closed: {\r\n        fontWeight: \"bold\"\r\n    },\r\n    teamBadge: {\r\n        width: 25,\r\n        height: 25,\r\n        margin: \"0 5px\",\r\n        '& svg, & path': {\r\n            width: 20,\r\n            height: 20\r\n        }\r\n    }\r\n}));\r\nfunction handleInputResults (updateFunc) {\r\n    return (e) => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        e.target.style.backgroundColor = \"white\";\r\n        if (value !== \"\" && (isNaN(parseInt(value)) || parseFloat(value) % 1 !== 0)) {\r\n            e.target.style.backgroundColor = \"#f4c7c7\";\r\n            return\r\n        }\r\n        updateFunc(prevState => ({...prevState, [name]: value}));\r\n    }\r\n}\r\nfunction getScoreString (score) {\r\n    if (score === 0 || score === \"0\") return \"0\"\r\n    if (!score) return \"\"\r\n    return score;\r\n}\r\nfunction addResult(goalsFor, goalsAgainst, results) {\r\n    if (isNaN(goalsFor) || isNaN(goalsAgainst)) results.push(null);\r\n    else results.push([goalsFor, goalsAgainst]);\r\n}\r\nfunction addTieBreaker(goalsFor, goalsAgainst, results) {\r\n    // don't do anything if tie breaker match isn't complete\r\n    if (isNaN(goalsFor) || isNaN(goalsAgainst)) return;\r\n    const homeResultArray = results[results.length -1];\r\n    if (homeResultArray) {\r\n        homeResultArray.push(goalsFor, goalsAgainst);\r\n    }\r\n}\r\n// only integers or Nan is passed as value to this function\r\nfunction isInvalidScore (inputName, value, opposingInputId) {\r\n    if (value < 0) {\r\n        document.getElementById(inputName).style.backgroundColor = \"#f4c7c7\";\r\n        return true\r\n    }\r\n    const opposingInput = document.getElementById(opposingInputId);\r\n    // for same team matches. value should not be a number anyways - input will be null\r\n    if (!isNaN(value) && !opposingInput.value) {\r\n        opposingInput.style.backgroundColor = \"#f4c7c7\";\r\n        return true\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport function KnockoutTeamResults (props) {\r\n    const {roundFixtures, teams, useTwoLegs, tournamentId, isUpdatingResults,\r\n            isCurrentRound, isFinal, useOneFinal} = props;\r\n    const [loading, setLoading] = useState(false);\r\n    const styles = useResults();\r\n    const setTeamNames = (fixture, teams) => {\r\n        let firstTeam, secondTeam, automaticWinner, firstTeamLogo, secondTeamLogo;\r\n        if (fixture.isEmpty) {\r\n            firstTeam = secondTeam = \"(empty)\";\r\n        } else if (roundFixtures[fixture.opponentIndex].isEmpty) {\r\n            firstTeam = teams[fixture.teamIndex].teamName;\r\n            firstTeamLogo = teams[fixture.teamIndex].teamLogo;\r\n            secondTeam = \"(empty)\";\r\n            automaticWinner = true;\r\n        } else {\r\n            firstTeam = teams[fixture.teamIndex].teamName;\r\n            firstTeamLogo = teams[fixture.teamIndex].teamLogo;\r\n            secondTeam = teams[roundFixtures[fixture.opponentIndex].teamIndex].teamName;\r\n            secondTeamLogo = teams[roundFixtures[fixture.opponentIndex].teamIndex].teamLogo;\r\n\r\n        }\r\n        return {firstTeam, secondTeam, automaticWinner, firstTeamLogo, secondTeamLogo};\r\n    }\r\n    const [updatedResults, setUpdatedResults] = useState({});\r\n    const handleResults = handleInputResults(setUpdatedResults);\r\n    const setInitialValues = (inputName, value) => {\r\n        setUpdatedResults(prevState => ({...prevState, [inputName]: value}));\r\n    }\r\n    const handleSubmit = () => {\r\n        const numberOfTeamsLeft = roundFixtures.length;\r\n        const results = [];\r\n        for (let i=0; i<numberOfTeamsLeft; i++) {\r\n            if (!useTwoLegs && i%2 === 1) return results.push(null);\r\n            const homeFor = parseInt(updatedResults[`homeGoalsFor${i}`]);\r\n            const homeAgainst = parseInt(updatedResults[`homeGoalsAgainst${i}`]);\r\n            const tieBreakerFor = parseInt(updatedResults[`tieBreakerGoalsFor${i}`]);\r\n            const tieBreakerAgainst = parseInt(updatedResults[`tieBreakerGoalsAgainst${i}`]);\r\n            const neutralFor = parseInt(updatedResults[`neutralGoalsFor${i}`]);\r\n            const neutralAgainst = parseInt(updatedResults[`neutralGoalsAgainst${i}`]);\r\n            // halt if score is invalid\r\n            if (useTwoLegs && (!(isFinal && useOneFinal))) {\r\n                if (isInvalidScore(`homeGoalsFor${i}`, homeFor, `homeGoalsAgainst${i}`)) return\r\n                if (isInvalidScore(`homeGoalsAgainst${i}`, homeAgainst, `homeGoalsFor${i}`)) return\r\n                addResult(homeFor, homeAgainst, results);\r\n            } else {\r\n                if (isInvalidScore(`neutralGoalsFor${i}`, neutralFor, `neutralGoalsAgainst${i}`)) return\r\n                if (isInvalidScore(`neutralGoalsAgainst${i}`, neutralAgainst, `neutralGoalsFor${i}`)) return\r\n                addResult(neutralFor, neutralAgainst, results);\r\n            }\r\n            if (isInvalidScore(`tieBreakerGoalsFor${i}`, tieBreakerFor, `tieBreakerGoalsAgainst${i}`)) return\r\n            if (isInvalidScore(`tieBreakerGoalsAgainst${i}`, tieBreakerAgainst, `tieBreakerGoalsFor${i}`)) return\r\n            addTieBreaker(tieBreakerFor, tieBreakerAgainst, results);\r\n        }\r\n        const values = {results, previousResults: roundFixtures};\r\n        const url = `tournament/${tournamentId}/knockoutResults`;\r\n        basicFetch(url, 'put', values, setLoading, true, true);\r\n    }\r\n\r\n    return (\r\n        <Container className={styles.resultsContainer} >\r\n            <WaitForServer wait={loading} />\r\n            {\r\n                ( !isCurrentRound && isUpdatingResults ) ?\r\n                    <Grid item className={styles.error}>\r\n                        <Typography>\r\n                            <span className={styles.closed}>THIS ROUND IS CLOSED</span>\r\n                            <br />\r\n                            <br />\r\n                            TO UPDATE RESULTS ON THIS TAB, CLEAR THE CURRENT ROUND FIXTURES\r\n                        </Typography>\r\n                    </Grid>\r\n                : isUpdatingResults &&\r\n                <>\r\n                    <Grid item className={styles.error}>\r\n                        <Typography>\r\n                            ALL UNSAVED CHANGES WILL BE CLEARED WHEN SWITCHING TABS\r\n                            <br />\r\n                            <br />\r\n                            ONLY FULL MATCH RESULT ENTRIES ARE SAVED\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={styles.submit}\r\n                        onClick={handleSubmit}\r\n                        disabled={!isCurrentRound}\r\n                    >\r\n                        Save Results\r\n                    </Button>\r\n                </>\r\n            }\r\n            {\r\n                useTwoLegs && (!(isFinal && useOneFinal)) &&\r\n                roundFixtures.map((fixture, index) => {\r\n                    if (index % 2 === 1) return null\r\n                    const {\r\n                        firstTeam, firstTeamLogo, secondTeam, secondTeamLogo, automaticWinner\r\n                    } = setTeamNames(fixture, teams);\r\n                    const homeFor = getScoreString(fixture.home.goalsFor);\r\n                    const homeAgainst = getScoreString(fixture.home.goalsAgainst);\r\n                    const awayFor = getScoreString(fixture.away.goalsFor);\r\n                    const awayAgainst = getScoreString(fixture.away.goalsAgainst);\r\n                    const tieBreakerFor = getScoreString(fixture.tieBreaker && fixture.tieBreaker.goalsFor);\r\n                    const tieBreakerAgainst = getScoreString(fixture.tieBreaker && fixture.tieBreaker.goalsAgainst);\r\n                    return (\r\n                        <Paper key={index} className={styles.resultSet}>\r\n                        {/*home result*/}\r\n                            <Result\r\n                                home={firstTeam}\r\n                                homeLogo={firstTeamLogo}\r\n                                away={secondTeam}\r\n                                awayLogo={secondTeamLogo}\r\n                                homeAutoAdvance={automaticWinner}\r\n                                goalsFor={homeFor || \"-\"}\r\n                                goalsAgainst={homeAgainst || \"-\"}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={homeFor}\r\n                                                 name={`homeGoalsFor${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={homeAgainst}\r\n                                                 name={`homeGoalsAgainst${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                            />\r\n                            {/*tiebreaker*/}\r\n                            {\r\n                                fixture.tieBreaker &&\r\n                                <Result\r\n                                    home={firstTeam}\r\n                                    homeLogo={firstTeamLogo}\r\n                                    away={secondTeam}\r\n                                    awayLogo={secondTeamLogo}\r\n                                    goalsFor={tieBreakerFor || \"-\"}\r\n                                    goalsAgainst={tieBreakerAgainst || \"-\"}\r\n                                    isUpdatingResults={isUpdatingResults}\r\n                                    isTieBreaker={true}\r\n                                    goalsForComp={\r\n                                        <ResultInput defaultValue={tieBreakerFor}\r\n                                                     name={`tieBreakerGoalsFor${index}`}\r\n                                                     onChange={handleResults}\r\n                                                     onMount={setInitialValues}\r\n                                                     disabled={!isCurrentRound}\r\n                                        />\r\n                                    }\r\n                                    goalsAgainstComp={\r\n                                        <ResultInput defaultValue={tieBreakerAgainst}\r\n                                                     name={`tieBreakerGoalsAgainst${index}`}\r\n                                                     onChange={handleResults}\r\n                                                     onMount={setInitialValues}\r\n                                                     disabled={!isCurrentRound}\r\n                                        />\r\n                                    }\r\n                                />\r\n                            }\r\n                            {/*away result */}\r\n                            <Result\r\n                                home={secondTeam}\r\n                                away={firstTeam}\r\n                                homeLogo={secondTeamLogo}\r\n                                awayLogo={firstTeamLogo}\r\n                                awayAutoAdvance={automaticWinner}\r\n                                goalsFor={awayAgainst || \"-\"}\r\n                                goalsAgainst={awayFor || \"-\"}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={awayAgainst}\r\n                                                 name={`homeGoalsFor${index+1}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={awayFor}\r\n                                                 name={`homeGoalsAgainst${index+1}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Paper>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                (!useTwoLegs || (isFinal && useOneFinal)) &&\r\n                roundFixtures.map((fixture, index) => {\r\n                    if (index % 2 === 1) return null\r\n                    const {\r\n                        firstTeam, firstTeamLogo, secondTeam, secondTeamLogo, automaticWinner\r\n                    } = setTeamNames(fixture, teams);\r\n                    const neutralFor = getScoreString(fixture.neutral.goalsFor);\r\n                    const neutralAgainst = getScoreString(fixture.neutral.goalsAgainst);\r\n                    const tieBreakerFor = getScoreString(fixture.tieBreaker && fixture.tieBreaker.goalsFor);\r\n                    const tieBreakerAgainst = getScoreString(fixture.tieBreaker && fixture.tieBreaker.goalsAgainst);\r\n                    return (\r\n                        <Paper key={index} className={styles.resultSet}>\r\n                            <Result\r\n                                home={firstTeam}\r\n                                homeLogo={firstTeamLogo}\r\n                                away={secondTeam}\r\n                                awayLogo={secondTeamLogo}\r\n                                homeAutoAdvance={automaticWinner}\r\n                                goalsFor={neutralFor || \"-\"}\r\n                                goalsAgainst={neutralAgainst || \"-\"}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={neutralFor}\r\n                                                 name={`neutralGoalsFor${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={neutralAgainst}\r\n                                                 name={`neutralGoalsAgainst${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 disabled={automaticWinner || !isCurrentRound}\r\n                                    />\r\n                                }\r\n                            />\r\n                            {/*tiebreaker*/}\r\n                            {\r\n                                fixture.tieBreaker &&\r\n                                <Result\r\n                                    home={firstTeam}\r\n                                    homeLogo={firstTeamLogo}\r\n                                    away={secondTeam}\r\n                                    awayLogo={secondTeamLogo}\r\n                                    goalsFor={tieBreakerFor || \"-\"}\r\n                                    goalsAgainst={tieBreakerAgainst || \"-\"}\r\n                                    isUpdatingResults={isUpdatingResults}\r\n                                    isTieBreaker={true}\r\n                                    goalsForComp={\r\n                                        <ResultInput defaultValue={tieBreakerFor}\r\n                                                     name={`tieBreakerGoalsFor${index}`}\r\n                                                     onChange={handleResults}\r\n                                                     onMount={setInitialValues}\r\n                                                     disabled={!isCurrentRound}\r\n                                        />\r\n                                    }\r\n                                    goalsAgainstComp={\r\n                                        <ResultInput defaultValue={tieBreakerAgainst}\r\n                                                     name={`tieBreakerGoalsAgainst${index}`}\r\n                                                     onChange={handleResults}\r\n                                                     onMount={setInitialValues}\r\n                                                     disabled={!isCurrentRound}\r\n                                        />\r\n                                    }\r\n                                />\r\n                            }\r\n                        </Paper>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                isUpdatingResults &&\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={styles.submit}\r\n                    onClick={handleSubmit}\r\n                    disabled={!isCurrentRound}\r\n                >\r\n                    Save Results\r\n                </Button>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport function LeagueTeamResults (props) {\r\n    const {teamFixtures, teamName, teamLogo, teamIndex, teams, useTwoLegs,\r\n            tournamentId ,isUpdatingResults} = props;\r\n    const [loading, setLoading] = useState(false);\r\n    const styles = useResults();\r\n\r\n    const [updatedResults, setUpdatedResults] = useState({});\r\n    const handleResults = handleInputResults(setUpdatedResults);\r\n    const setInitialValues = (inputName, value) => {\r\n        setUpdatedResults(prevState => ({...prevState, [inputName]: value}));\r\n    }\r\n    const handleSubmit = () => {\r\n        const numberOfTeams = teams.length;\r\n        const home = [];\r\n        const away = [];\r\n        const neutral = [];\r\n        for (let i=0; i<numberOfTeams; i++) {\r\n            const homeFor = parseInt(updatedResults[`homeGoalsFor${i}`]);\r\n            const homeAgainst = parseInt(updatedResults[`homeGoalsAgainst${i}`]);\r\n            const awayFor = parseInt(updatedResults[`awayGoalsFor${i}`]);\r\n            const awayAgainst = parseInt(updatedResults[`awayGoalsAgainst${i}`]);\r\n            const neutralFor = parseInt(updatedResults[`neutralGoalsFor${i}`]);\r\n            const neutralAgainst = parseInt(updatedResults[`neutralGoalsAgainst${i}`]);\r\n            // halt if score is invalid\r\n            if (useTwoLegs) {\r\n                if (isInvalidScore(`homeGoalsFor${i}`, homeFor, `homeGoalsAgainst${i}`)) return\r\n                if (isInvalidScore(`homeGoalsAgainst${i}`, homeAgainst, `homeGoalsFor${i}`)) return\r\n                if (isInvalidScore(`awayGoalsFor${i}`, awayFor, `awayGoalsAgainst${i}`)) return\r\n                if (isInvalidScore(`awayGoalsAgainst${i}`, awayAgainst, `awayGoalsFor${i}`)) return\r\n                addResult(homeFor, homeAgainst, home);\r\n                addResult(awayFor, awayAgainst, away);\r\n            } else {\r\n                if (isInvalidScore(`neutralGoalsFor${i}`, neutralFor, `neutralGoalsAgainst${i}`)) return\r\n                if (isInvalidScore(`neutralGoalsAgainst${i}`, neutralAgainst, `neutralGoalsFor${i}`)) return\r\n                addResult(neutralFor, neutralAgainst, neutral);\r\n            }\r\n        }\r\n        const values = {teamIndex, home, away, neutral, previousResults: teamFixtures};\r\n        const url = `tournament/${tournamentId}/leagueResults`;\r\n        basicFetch(url, 'put', values, setLoading, true, true);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={styles.resultsContainer}>\r\n            <WaitForServer wait={loading}/>\r\n            {\r\n                isUpdatingResults &&\r\n                    <>\r\n                        <Grid item className={styles.error}>\r\n                            <Typography>\r\n                                ALL UNSAVED CHANGES WILL BE CLEARED WHEN SWITCHING TABS\r\n                                <br />\r\n                                ONLY FULL MATCH RESULT ENTRIES ARE SAVED\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={styles.submit}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Save Results\r\n                        </Button>\r\n                    </>\r\n            }\r\n            {\r\n                useTwoLegs &&\r\n                teamFixtures.home.map((fixture, index) => {\r\n                    if (fixture && fixture.isSameTeam) return null\r\n                    const homeGoalsFor = fixture && fixture.goalsFor.toString();\r\n                    const homeGoalsAgainst = fixture && fixture.goalsAgainst.toString();\r\n                    const awayGoalsFor = teamFixtures.away[index] && teamFixtures.away[index].goalsFor.toString();\r\n                    const awayGoalsAgainst = teamFixtures.away[index] && teamFixtures.away[index].goalsAgainst.toString();\r\n                    return (\r\n                        <Paper key={index} className={styles.resultSet}>\r\n                            {/*home result*/}\r\n                            <Result\r\n                                home={teamName}\r\n                                homeLogo={teamLogo}\r\n                                away={teams[index].teamName}\r\n                                awayLogo={teams[index].teamLogo}\r\n                                goalsFor={homeGoalsFor}\r\n                                goalsAgainst={homeGoalsAgainst}\r\n                                handleResults={handleResults}\r\n                                useTwoLegs={useTwoLegs}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={homeGoalsFor || \"\"}\r\n                                                 name={`homeGoalsFor${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                                 />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={homeGoalsAgainst || \"\"}\r\n                                                 name={`homeGoalsAgainst${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                    />\r\n                                }\r\n                            />\r\n                            {/*away result*/}\r\n                            {/*teams and scores are reversed on away*/}\r\n                            <Result\r\n                                home={teams[index].teamName}\r\n                                homeLogo={teams[index].teamLogo}\r\n                                away={teamName}\r\n                                awayLogo={teamLogo}\r\n                                goalsFor={awayGoalsAgainst}\r\n                                goalsAgainst={awayGoalsFor}\r\n                                handleResults={handleResults}\r\n                                useTwoLegs={useTwoLegs}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={awayGoalsAgainst || \"\"}\r\n                                                 name={`awayGoalsAgainst${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                    />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={awayGoalsFor || \"\"}\r\n                                                 name={`awayGoalsFor${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Paper>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                !useTwoLegs &&\r\n                teamFixtures.neutral.map((fixture, index) => {\r\n                    if (fixture && fixture.isSameTeam) return null\r\n                    const neutralGoalsFor = fixture && fixture.goalsFor.toString();\r\n                    const neutralGoalsAgainst = fixture && fixture.goalsAgainst.toString();\r\n                    return (\r\n                        <Paper key={index} className={styles.resultSet}>\r\n                            {/*neutral result*/}\r\n                            <Result\r\n                                home={teamName}\r\n                                homeLogo={teamLogo}\r\n                                away={teams[index].teamName}\r\n                                awayLogo={teams[index].teamLogo}\r\n                                goalsFor={neutralGoalsFor}\r\n                                goalsAgainst={neutralGoalsAgainst}\r\n                                handleResults={handleResults}\r\n                                useTwoLegs={useTwoLegs}\r\n                                isUpdatingResults={isUpdatingResults}\r\n                                goalsForComp={\r\n                                    <ResultInput defaultValue={neutralGoalsFor || \"\"}\r\n                                                 name={`neutralGoalsFor${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                    />\r\n                                }\r\n                                goalsAgainstComp={\r\n                                    <ResultInput defaultValue={neutralGoalsAgainst || \"\"}\r\n                                                 name={`neutralGoalsAgainst${index}`}\r\n                                                 onChange={handleResults}\r\n                                                 onMount={setInitialValues}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Paper>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                isUpdatingResults &&\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={styles.submit}\r\n                    onClick={handleSubmit}\r\n                >\r\n                    Save Results\r\n                </Button>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction ResultInput (props) {\r\n    const {name, defaultValue, onChange, onMount, disabled} = props;\r\n    const styles = useResults();\r\n    useEffect(() => {\r\n        onMount(name, defaultValue);\r\n    }, []);\r\n    return (\r\n        <TextField\r\n            defaultValue={defaultValue}\r\n            disabled={disabled}\r\n            id={name}\r\n            inputProps={{max: 999, min: 0, className: styles.resultInput}}\r\n            name={name}\r\n            placeholder=\"-\"\r\n            onChange={onChange}\r\n            required\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            // fullWidth\r\n            // id={teamNameInput}\r\n            // label=\"Team Name\"\r\n            // disabled={disabled || disableTeamNames}\r\n            // value={values[teamNameInput] || \"\"}\r\n        />\r\n    )\r\n}\r\n\r\nfunction Result (props) {\r\n    const styles = useResults();\r\n    const {home, away, goalsFor, goalsAgainst, homeAutoAdvance, awayAutoAdvance,\r\n            isUpdatingResults, goalsForComp, goalsAgainstComp, isTieBreaker,\r\n                homeLogo, awayLogo} = props;\r\n    return (\r\n        <>\r\n            {\r\n                isTieBreaker &&\r\n                    <Box className={styles.tieBreaker}>\r\n                        <Typography className={styles.tieBreakerText}>TIE-BREAKER</Typography>\r\n                    </Box>\r\n            }\r\n            <Box className={`${styles.resultBox} ${isTieBreaker?styles.tieBreaker:\"\"}`}>\r\n                {\r\n                    !isUpdatingResults &&\r\n                    <Avatar alt=\"Team badge\"\r\n                            src={homeLogo}\r\n                            className={styles.teamBadge}\r\n                    >\r\n                        {!homeLogo && <SportsSoccerOutlinedIcon />}\r\n                    </Avatar>\r\n                }\r\n\r\n                <Typography className={`${styles.team} ${styles.homeTeam}`}>\r\n                    {home}\r\n                    {\r\n                        homeAutoAdvance &&\r\n                        <>\r\n                            <br />\r\n                            <span className={styles.advanced}>(auto adv)</span>\r\n                        </>\r\n                    }\r\n                </Typography>\r\n                {\r\n                    !isUpdatingResults &&\r\n                    <>\r\n                        <Typography className={styles.goals}>\r\n                            {isNaN(parseInt(goalsFor)) ? \"-\" : goalsFor}\r\n                        </Typography>\r\n                        <Typography className={styles.goals}>\r\n                            {isNaN(parseInt(goalsAgainst)) ? \"-\" : goalsAgainst}\r\n                        </Typography>\r\n                    </>\r\n                }\r\n                {\r\n                    isUpdatingResults &&\r\n                    <>\r\n                        {goalsForComp}\r\n                        {goalsAgainstComp}\r\n                    </>\r\n                }\r\n                <Typography className={`${styles.team} ${styles.awayTeam}`}>\r\n                    {away}\r\n                    {\r\n                        awayAutoAdvance &&\r\n                        <>\r\n                            <br />\r\n                            <span className={styles.advanced}>(auto adv)</span>\r\n                        </>\r\n                    }\r\n                </Typography>\r\n                {\r\n                    !isUpdatingResults &&\r\n                    <Avatar alt=\"Team badge\"\r\n                            src={awayLogo}\r\n                            className={styles.teamBadge}\r\n                    >\r\n                        {!awayLogo && <SportsSoccerOutlinedIcon />}\r\n                    </Avatar>\r\n                }\r\n            </Box>\r\n        </>\r\n\r\n    )\r\n}","C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\admin-actions.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\update-teams.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\update-results.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\pages\\search.js",[],"C:\\Users\\clint\\Documents\\Projects\\tournament\\tournament-react\\src\\components\\admin-dir\\team-search.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":636,"column":8,"nodeType":"101","endLine":636,"endColumn":10,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultValue', 'name', and 'onMount'. Either include them or remove the dependency array.","ArrayExpression",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [defaultValue, name, onMount]",{"range":"108","text":"109"},[30705,30707],"[defaultValue, name, onMount]"]